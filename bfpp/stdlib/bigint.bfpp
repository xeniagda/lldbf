#include hexdigit.bfpp
#include std.bfpp


// TODO Generate all of this automatically

// TODO: Implement multiplication

struct u8 {
    n4: Byte,
    n0: Byte,
}

def add_u8_carry(a: u8, b: u8, carry: Byte, tmp1: Byte, tmp2: Byte) at a.n0 {
    run add_nibble_carry(a.n0, b.n0, carry, tmp1, tmp2)
    to carry [ to a.n4 + to carry - ]
    run add_nibble_carry(a.n4, b.n4, carry, tmp1, tmp2)
}

def copy_u8(a: u8, b: u8, tmp: Byte) at a.n0 {
    run copy(a.n0, b.n0, tmp)
    run copy(a.n4, b.n4, tmp)
}

def print_u8_hex(a: u8, tmp1: Byte, tmp2: Byte) at a.n4 {
    run digit2hex(a.n4, tmp1, tmp2)
    to a.n4 .
    run digit2hex(a.n0, tmp1, tmp2)
    to a.n0 .
}

def read_u8_hex(a: u8, tmp1: Byte, tmp2: Byte) at a.n4 {
    to a.n4 ,
    run hex2digit(a.n4, tmp1, tmp2)

    to a.n0 ,
    run hex2digit(a.n0, tmp1, tmp2)
}

def invert_u8(a: u8, tmp1: Byte) at a.n0 {
    to tmp1 [-] +15
    to a.n0 [ to tmp1 - to a.n0 - ]
    to tmp1 [ to a.n0 + to tmp1 - ]

    to tmp1 +15
    to a.n4 [ to tmp1 - to a.n4 - ]
    to tmp1 [ to a.n4 + to tmp1 - ]
}

struct u16 {
    n12: Byte,
    n8: Byte,
    n4: Byte,
    n0: Byte,
}

def add_u16_carry(a: u16, b: u16, carry: Byte, tmp1: Byte, tmp2: Byte) at a.n0 {
    run add_nibble_carry(a.n0, b.n0, carry, tmp1, tmp2)

    to carry [ to a.n4 + to carry - ]
    run add_nibble_carry(a.n4, b.n4, carry, tmp1, tmp2)

    to carry [ to a.n8 + to carry - ]
    run add_nibble_carry(a.n8, b.n8, carry, tmp1, tmp2)

    to carry [ to a.n12 + to carry - ]
    run add_nibble_carry(a.n12, b.n12, carry, tmp1, tmp2)
}

def copy_u16(a: u16, b: u16, tmp: Byte) at a.n0 {
    run copy(a.n0, b.n0, tmp)
    run copy(a.n4, b.n4, tmp)
    run copy(a.n8, b.n8, tmp)
    run copy(a.n12, b.n12, tmp)
}

def print_u16_hex(a: u16, tmp1: Byte, tmp2: Byte) at a.n12 {
    run digit2hex(a.n12, tmp1, tmp2)
    to a.n12 .
    run digit2hex(a.n8, tmp1, tmp2)
    to a.n8 .
    run digit2hex(a.n4, tmp1, tmp2)
    to a.n4 .
    run digit2hex(a.n0, tmp1, tmp2)
    to a.n0 .
}

def read_u16_hex(a: u16, tmp1: Byte, tmp2: Byte) at a.n12 {
    to a.n12 ,
    run hex2digit(a.n12, tmp1, tmp2)

    to a.n8 ,
    run hex2digit(a.n8, tmp1, tmp2)

    to a.n4 ,
    run hex2digit(a.n4, tmp1, tmp2)

    to a.n0 ,
    run hex2digit(a.n0, tmp1, tmp2)
}

def invert_u16(a: u16, tmp1: Byte) at a.n0 {
    to tmp1 [-] +15
    to a.n0 [ to tmp1 - to a.n0 - ]
    to tmp1 [ to a.n0 + to tmp1 - ]

    to tmp1 +15
    to a.n4 [ to tmp1 - to a.n4 - ]
    to tmp1 [ to a.n4 + to tmp1 - ]

    to tmp1 +15
    to a.n8 [ to tmp1 - to a.n8 - ]
    to tmp1 [ to a.n8 + to tmp1 - ]

    to tmp1 +15
    to a.n12 [ to tmp1 - to a.n12 - ]
    to tmp1 [ to a.n12 + to tmp1 - ]
}

struct u32 {
    n28: Byte,
    n24: Byte,
    n20: Byte,
    n16: Byte,

    n12: Byte,
    n8: Byte,
    n4: Byte,
    n0: Byte,
}

def add_u32_carry(a: u32, b: u32, carry: Byte, tmp1: Byte, tmp2: Byte) at a.n0 {
    run add_nibble_carry(a.n0, b.n0, carry, tmp1, tmp2)

    to carry [ to a.n4 + to carry - ]
    run add_nibble_carry(a.n4, b.n4, carry, tmp1, tmp2)

    to carry [ to a.n8 + to carry - ]
    run add_nibble_carry(a.n8, b.n8, carry, tmp1, tmp2)

    to carry [ to a.n12 + to carry - ]
    run add_nibble_carry(a.n12, b.n12, carry, tmp1, tmp2)


    to carry [ to a.n16 + to carry - ]
    run add_nibble_carry(a.n16, b.n16, carry, tmp1, tmp2)

    to carry [ to a.n20 + to carry - ]
    run add_nibble_carry(a.n20, b.n20, carry, tmp1, tmp2)

    to carry [ to a.n24 + to carry - ]
    run add_nibble_carry(a.n24, b.n24, carry, tmp1, tmp2)

    to carry [ to a.n28 + to carry - ]
    run add_nibble_carry(a.n28, b.n28, carry, tmp1, tmp2)
}

def copy_u32(a: u32, b: u32, tmp: Byte) at a.n0 {
    run copy(a.n0, b.n0, tmp)
    run copy(a.n4, b.n4, tmp)
    run copy(a.n8, b.n8, tmp)
    run copy(a.n12, b.n12, tmp)

    run copy(a.n16, b.n16, tmp)
    run copy(a.n20, b.n20, tmp)
    run copy(a.n24, b.n24, tmp)
    run copy(a.n28, b.n28, tmp)
}

def print_u32_hex(a: u32, tmp1: Byte, tmp2: Byte) at a.n28 {
    run digit2hex(a.n28, tmp1, tmp2)
    to a.n28 .
    run digit2hex(a.n24, tmp1, tmp2)
    to a.n24 .
    run digit2hex(a.n20, tmp1, tmp2)
    to a.n20 .
    run digit2hex(a.n16, tmp1, tmp2)
    to a.n16 .

    run digit2hex(a.n12, tmp1, tmp2)
    to a.n12 .
    run digit2hex(a.n8, tmp1, tmp2)
    to a.n8 .
    run digit2hex(a.n4, tmp1, tmp2)
    to a.n4 .
    run digit2hex(a.n0, tmp1, tmp2)
    to a.n0 .
}

def read_u32_hex(a: u32, tmp1: Byte, tmp2: Byte) at a.n28 {
    to a.n28 ,
    run hex2digit(a.n28, tmp1, tmp2)
    to a.n24 ,
    run hex2digit(a.n24, tmp1, tmp2)
    to a.n20 ,
    run hex2digit(a.n20, tmp1, tmp2)
    to a.n16 ,
    run hex2digit(a.n16, tmp1, tmp2)

    to a.n12 ,
    run hex2digit(a.n12, tmp1, tmp2)
    to a.n8 ,
    run hex2digit(a.n8, tmp1, tmp2)
    to a.n4 ,
    run hex2digit(a.n4, tmp1, tmp2)
    to a.n0 ,
    run hex2digit(a.n0, tmp1, tmp2)
}

def invert_u32(a: u32, tmp1: Byte) at a.n0 {
    to tmp1 [-] +15
    to a.n0 [ to tmp1 - to a.n0 - ]
    to tmp1 [ to a.n0 + to tmp1 - ]

    to tmp1 +15
    to a.n4 [ to tmp1 - to a.n4 - ]
    to tmp1 [ to a.n4 + to tmp1 - ]

    to tmp1 +15
    to a.n8 [ to tmp1 - to a.n8 - ]
    to tmp1 [ to a.n8 + to tmp1 - ]

    to tmp1 +15
    to a.n12 [ to tmp1 - to a.n12 - ]
    to tmp1 [ to a.n12 + to tmp1 - ]

    to tmp1 +15
    to a.n16 [ to tmp1 - to a.n16 - ]
    to tmp1 [ to a.n16 + to tmp1 - ]

    to tmp1 +15
    to a.n20 [ to tmp1 - to a.n20 - ]
    to tmp1 [ to a.n20 + to tmp1 - ]

    to tmp1 +15
    to a.n24 [ to tmp1 - to a.n24 - ]
    to tmp1 [ to a.n24 + to tmp1 - ]

    to tmp1 +15
    to a.n28 [ to tmp1 - to a.n28 - ]
    to tmp1 [ to a.n28 + to tmp1 - ]
}

declare (a: u32, b: u32, tmp1, tmp2, tmp3) at a.n28

run read_u32_hex(a, tmp1, tmp2)
run read_u32_hex(b, tmp1, tmp2)

debug
run invert_u32(b, tmp1)
debug
run add_u32_carry(a, b, tmp1, tmp2, tmp3)
debug

run print_u32_hex(a, tmp1, tmp2)

