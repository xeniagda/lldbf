// Some simple standard macros

def copy(source: Byte, dest: Byte, tmp: Byte) at source {
    to dest [-]
    to tmp [-]

    to source [ to dest + to tmp + to source - ]
    to tmp [ to source + to tmp - ]
}

// Adds to 4-bit numbers together

// TODO
// Might be able to add to carry instead of setting it
// We currently need to know if we carried at the end, to make sure the value stays
// in the range 0..16
// But we might be able to make a stay in the range when we do the ==0-check
// If we can do this, we would be able to shave off one temporary to the
// multiply_nibble function
def add_nibble_carry(a: Byte, b: Byte, carry: Byte, tmp1: Byte, tmp2: Byte) at a {
    to tmp1 [-]
    to tmp2 [-]
    to carry [-]
    // a + b > 16
    // a > 16 - b = b_inv

    // To check if a > 16 - b, we will subtract 16 - b from a, and see if a doesn't hit 0 on the way there
    // This will leave a with a value of a - (16 - b) = a + b - 16
    // We can make this (a + b) mod 16 by checking the carry

    declare (b_inv) with b_inv at tmp1
    undeclare (tmp1)

    run add16(b_inv, tmp2)
    to b [ to b_inv - to b - ]

    declare (tmp3) with tmp3 at b
    undeclare (b)

    to carry +
    to b_inv [
        // Check if a is zero

        // Move a to tmp2, set tmp3 = a == 0
        to tmp3 +
        to a [ to tmp2 + to tmp3 [-] to a - ]

        // Move tmp2 back to a
        to tmp2 [ to a + to tmp2 - ]

        // If tmp3, we'll reset carry
        to tmp3 [ to carry [-] to tmp3 - ]

        to a -
        to b_inv -
    ]

    // If we don't have carry, the value of a is a + b - 16
    // So we want to add 16 to it

    // To do that, we'll add 16, and subtract 16 if we have carry
    run add16(a, tmp3)

    to carry [
        run dec16(a, tmp3)
        to tmp2 +
        to carry -
    ]
    to tmp2 [ to carry + to tmp2 - ]
}

def divmod_2(a: Byte, div: Byte, mod: Byte, tmp1: Byte, tmp2: Byte) at div {
    to div [-]
    to mod [-]
    to tmp1 [-]
    to tmp2 [-]

    to a [
        to a -

        // We want to check if a == 0, and if so, set a and mod to one and decrease div
        // Let tmp1 = (a == 0), move a to tmp2
        to tmp1 +
        to a [ to tmp1 [-] to tmp2 + to a - ]

        // Move tmp2 back to a
        to tmp2 [ to a + to tmp2 - ]

        // Now, let's set a and carry to one and decrease div if tmp1

        to tmp1 [
            to a +
            to mod +
            to div -
            to tmp1 -
        ]

        to div +

        to a -
    ]
}


// TODO
// Is it faster/simpler to do divide and conquer?

// TODO
// Maybe the result should be a u8? But then we'd have to move this to bigint.bfpp
def multiply_nibble(a: Byte, b: Byte, lower: Byte, upper: Byte, tmp1: Byte, tmp2: Byte, tmp3: Byte, tmp4: Byte) at a {
    to tmp1 [-]
    to tmp2 [-]
    to tmp3 [-]
    to tmp4 [-]

    declare (a_copy) with a_copy at tmp1
    undeclare (tmp1)

    declare (carry) with carry at tmp2
    undeclare (tmp2)


    to b [
        run copy(a, a_copy, tmp3)
        run add_nibble_carry(lower, a_copy, carry, tmp3, tmp4)

        to carry [ to upper + to carry - ]

        to b -
    ]
}

